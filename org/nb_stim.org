#+STARTUP: fold
#+TITLE: Cholinergic neuromodulation of prefrontal attractor dynamics controls performance in spatial WM
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* Settings
** autoreload
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload

# Out[1]:
** project root
#+begin_src ipython
  import os
  import sys

  # current_dir = os.path.dirname(os.path.abspath('__file__'))
  # # Get parent directory (= the project root)
  # project_root = os.path.join(current_dir, '..')
  # # Append to system path
  # sys.path.append(project_root)
  # print(sys.path)
  print("Python exe")
  print(sys.executable)

#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
** imports and setting up matplotlib
#+begin_src ipython
  import numpy as np
  import matplotlib
  import matplotlib.pyplot as plt
  import seaborn as sns
  import pandas as pd
  import pickle as pkl

  sns.set_context("poster")
  sns.set_style("ticks")
  plt.rc("axes.spines", top=False, right=False)
  fig_path = '../figs/perf'
  golden_ratio = (5**.5 - 1) / 2
  width = 6
  height = width * golden_ratio

  matplotlib.rcParams['figure.figsize'] = [width, height]

  matplotlib.rcParams['lines.markersize'] = 5
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:

#+begin_src ipython
  print('a test figure')
  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  # plt.show()

  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  # plt.show()

  1+1

#+end_src

#+RESULTS:
:RESULTS:
: a test figure
: 2
[[file:./.ob-jupyter/9f2f984b132c293e11342d9f682c1e582f2cc013.png]]
[[file:./.ob-jupyter/9f2f984b132c293e11342d9f682c1e582f2cc013.png]]
:END:

* Continuous rate model
** imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/rnn_numba')
  from src.model.rate_model import Network
#+end_src

#+RESULTS:

** Single trial
#+begin_src ipython
  model = Network('config_bump.yml', 'test')
#+end_src

#+RESULTS:
: Loading config from /home/leon/models/rnn_numba/conf/config_bump.yml
: Saving to /home/leon/models/rnn_numba/data/simul/test.h5

#+begin_src ipython
  model.run()
#+end_src

#+RESULTS:
: Generating matrix Cij
: Saving matrix to /home/leon/models/rnn_numba/data/matrix/Cij.npy
: Running simulation
: Elapsed (with compilation) = 6.908852840075269s

** Diffusivity vs. FF input
#+begin_src ipython
  I0_list = np.arange(14, 27)
  # n_trials = 1
  # for i_simul in range(1, n_trials+1):

  IF_LOAD_MAT = 0
  IF_SAVE_MAT = 1

  for I0 in I0_list:
      print('##########################################')
      print("trial", i_simul, "I0", I0)
      print('##########################################')

      model = Network('config_bump.yml', 'test_I0_%d' % I0, Iext=[I0],
                      IF_LOAD_MAT=IF_LOAD_MAT, IF_SAVE_MAT=IF_SAVE_MAT)

      IF_LOAD_MAT = 1
      IF_SAVE_MAT = 0

      model.run()

#+end_src

#+RESULTS:

** Diffusivity vs I0
*** run
#+begin_src ipython
  I0_list = np.arange(14, 27)  
  ini_list = np.arange(21, 51)

  IF_LOAD_MAT = 0
  IF_SAVE_MAT = 1

  for ini in ini_list:
      for I0 in I0_list:
          print('##########################################')
          print("trial", i_simul, "I0", I0)
          print('##########################################')

          model = Network('config_bump.yml', 'bump_I0_%d_ini_%d' % (I0, ini),
                          Iext=[I0], IF_LOAD_MAT=IF_LOAD_MAT, IF_SAVE_MAT=IF_SAVE_MAT)
          
          IF_LOAD_MAT = 1
          IF_SAVE_MAT = 0

          model.run()

#+end_src

#+RESULTS:

*** analysis
**** imports
#+begin_src ipython
import pandas as pd
from src.analysis.decode import decode_bump
#+end_src

#+RESULTS:

**** load data
#+begin_src ipython
  I0_list = np.arange(14, 27)  
  ini_list = np.arange(1, 21)

  df = pd.DataFrame()

  for ini in ini_list:
      df_i = pd.DataFrame()
      
      for I0 in I0_list:
          df_ij = pd.read_hdf("/home/leon/models/rnn_numba/data/simul/bump_I0_%d_ini_%d.h5" % (I0, ini), mode="r")
          df_ij['I0'] = I0
          df_ij['trial'] = ini

          df_i = pd.concat([df_i, df_ij])

      df = pd.concat([df, df_i])

#+end_src

#+RESULTS:

#+begin_src ipython
  print(df.head())
#+end_src

#+RESULTS:
:       rates         ff       h_E  neurons   time  I0  trial
: 0  3.947560  -2.416066 -5.961643        0  0.499  14      1
: 1  2.893251  -1.182211 -5.961151        1  0.499  14      1
: 2  1.298534 -12.658693 -5.960662        2  0.499  14      1
: 3  3.479553  -2.085257 -5.960176        3  0.499  14      1
: 4  1.487565  -1.876773 -5.959693        4  0.499  14      1

**** decode bump

#+begin_src ipython
  res = df.groupby(['time', 'I0', 'trial'])['rates'].apply(decode_bump).reset_index()
  res[['m0', 'm1', 'phase']] = pd.DataFrame(res['rates'].tolist(), index=res.index)
  res = res.drop(columns=['rates'])
  print(res.head())
#+end_src

#+RESULTS:
:     time  I0  trial        m0        m1     phase
: 0  0.499  14      1  2.187073  0.103701  5.382761
: 1  0.499  14      2  2.175278  0.088806  2.524689
: 2  0.499  14      3  2.161153  0.031426  2.566770
: 3  0.499  14      4  2.207327  0.086762  5.431386
: 4  0.499  14      5  2.171110  0.080913  3.745557

#+begin_src ipython
  
  data = res[res.I0==14]
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.lineplot(data=data, x='time', y='m0', legend=False, lw=1, ax=ax[0])
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}_0$')

  sns.lineplot(x=data['time'], y=data['m1']/data['m0'], legend=False, lw=1, ax=ax[1])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  # ax[1].set_ylabel('$\mathcal{F}_1$')

  sns.lineplot(x=data['time'], y=data['phase']*180/np.pi, legend=False, lw=1, ax=ax[2], hue=data['trial'])
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')

  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d3e15f4b804e4b96887c16aeb1403a87b19b3969.png]]


#+begin_src ipython
  from scipy.stats import circmean

  def precision_error(theta):
      return np.nanvar((theta - circmean(theta)) * 180 / np.pi)

#+end_src

#+RESULTS:

#+begin_src ipython
  last = res[res.time==res.time.iloc[-1]]
  last = last.drop(columns=['time'])
  print(last.head())
#+end_src

#+RESULTS:
:       I0  trial        m0        m1     phase
: 1820  14      1  5.855159  5.340802  3.274252
: 1821  14      2  5.856219  5.428901  3.112710
: 1822  14      3  5.855686  5.416223  3.118107
: 1823  14      4  5.871140  5.482983  3.018655
: 1824  14      5  5.893334  5.506744  3.136093

#+begin_src ipython
  precision = last.groupby(['I0']).phase.apply(precision_error).reset_index()
  print(precision.head())
  
  sns.lineplot(precision, x='I0', y='phase')
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
:    I0      phase
: 0  14  38.815613
: 1  15  36.074334
: 2  16  24.347441
: 3  17  31.151762
: 4  18  43.532238
[[file:./.ob-jupyter/398029d55e10208531b7909edd787508ca45f5f1.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(last, x='I0', y=last['m1']/last['m0'], legend=None, ax=ax[0])
  ax[0].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[0].set_xlabel('FF input')
  
#+end_src

#+RESULTS:
:RESULTS:
: Text(0.5, 0, 'FF input')
[[file:./.ob-jupyter/b2364fc18abb932720baedec269fd42bcc0e2fe3.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:

** Distraction
* Spiking network model
** imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  print(sys.path)
#+end_src

#+RESULTS:
: ['/home/leon/models/lif_cpp', '/home/leon/models/rnn_numba', '/home/leon/nb_stim_data/org', '/home/leon/mambaforge/envs/dual_data/lib/python38.zip', '/home/leon/mambaforge/envs/dual_data/lib/python3.8', '/home/leon/mambaforge/envs/dual_data/lib/python3.8/lib-dynload', '', '/home/leon/mambaforge/envs/dual_data/lib/python3.8/site-packages']

#+begin_src ipython
  from time import sleep
  from yaml import safe_load
  
  from run_model import run_cpp, update_conf, restore_conf
  from analysis.bump import decode_bump, circcvl
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('../data/simul'+ session + 'rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)

    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

#+RESULTS:

#+begin_src ipython
  def get_times():
       config = safe_load(open("../conf/config_EI.yml", "r"))

       times = np.arange(config['T_STEADY'], config['DURATION'], config['T_WINDOW'])
       times -= config['T_STEADY']
       times /= 1000.0
       
       return times
#+end_src

#+RESULTS:

** Single trial
*** compile
#+begin_src sh
  cd $HOME/models/lif_cpp
  make
#+end_src

#+RESULTS:
: g++ -o ./bin/LifNet obj/sparse_mat.o obj/lif_network.o obj/globals.o obj/main.o -Wall -lyaml-cpp -std=c++17 -pthread -Ofast -s

*** run
#+begin_src ipython
  # pass screen session_name to run_cpp
  session = 'single_trial'
  run_cpp(session)
#+end_src

#+RESULTS:
*** results
**** Raster
#+begin_src ipython
  session = '/Ie_4.40/'
  # session = '/Jee_21.00/'

  # session = '/'
  data = get_data(session)
  print('data', data.shape)
  print('rates', np.mean(data[:30000]), np.mean(data[10000:]))

  theta = np.linspace(0, 360, 30000)
  times = get_times()
  print(times.shape)
  plt.imshow(data[:30000], aspect='auto', vmin=0, vmax=10, cmap='jet', extent=[0, times[data.shape[1]], 0, 30000], origin='lower')

  plt.xlabel('Time (s)')
  plt.ylabel('Pref. Loc. (Â°)')
  plt.yticks([0, 30000/4, 30000/2, 3*30000/4, 30000], [0, 90, 180, 270, 360])

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: data (40000, 223)
: rates 2.4017668 6.147302
: (224,)
[[file:./.ob-jupyter/6f36241fd3f929347ea7233394029611143000cb.png]]
:END:

**** Fourier moments 
#+begin_src ipython
  data = get_data(session)

  rates_E = data[:30000]
  m0, m1, phi = decode_bump(rates_E, axis=0)

  times = get_times()
  times = times[:data.shape[1]]

  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))
  ax[0].plot(times, m0)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  # ax[0].set_yticks([0, 1, ])
  # ax[0].set_ylim([0, 5])

  ax[1].plot(times, m1/m0)
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_yticks([0, 0.5, 1, 1.5])
  # ax[1].set_ylim([0, 1])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([0, 90, 180, 270, 360])
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ee70b2a483e7fede7eb3edd339d563f1ec640804.png]]
**** Spatial profile
#+begin_src ipython
  smooth_E = circcvl(rates_E, windowSize=3000, axis=0)
  theta = np.linspace(0, 360, rates_E.shape[0])
  plt.plot(theta, smooth_E[:, -1])
  
  plt.xlabel('Prefered Location (Â°)')
  plt.ylabel('Rate (Hz)')
  plt.yticks([0, 10])
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/80a259956077e910d4d3a16add44fdeba390d089.png]]


#+BEGIN_SRC ipython

#+END_SRC

#+RESULTS:

** Phase space exploration
*** Varying Jee
**** run
#+begin_src ipython
  def run_loop_Jee(Jee_list):
      
      for Jee in Jee_list:
          session = "Jee_%.2f" % Jee
          data_path = '/home/leon/models/lif_cpp/data/simul/' + session
          update_conf('../conf/config_EI', 'DATA_PATH', data_path)
          update_conf('../conf/config_EI', 'Jab', float(Jee), axis=0)

          sleep(.2)
          run_cpp(session)
          sleep(.2)

      sleep(1)
      restore_conf('../conf/config_EI.yml')

#+end_src

#+RESULTS:

#+begin_src ipython
  
  Jee_list = np.arange(15, 30, .5)
  run_loop_Jee(Jee_list)

#+end_src

#+RESULTS:
: File moved successfully!
**** results
#+begin_src ipython
  def get_rates_Jee(Jee_list):
     rates = []
     for Jee in Jee_list:
        session = "/Jee_%.2f/" % Jee
        rate = get_data(session)
        rates.append(rate[:30000])
        
     rates = np.array(rates)
     return rates
#+end_src

#+RESULTS:

#+begin_src ipython
  Jee_list = np.arange(15, 25, .5)
  rates = get_rates_Jee(Jee_list)
  print(rates.shape)
  m0, m1, phase = decode_bump(rates, axis=1)

  amp = m1 / m0
  print(m0.shape)
  # print(Jee_list[20])
  # print(Jee_list[23])
  # plt.plot(amp[20], label='Off');
  # plt.plot(amp[23], label='On');
  # plt.legend(fontsize=10)
  plt.plot(Jee_list, amp[:,-1])
  plt.xlabel('Jee')

#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[279], line 2[0m
: [1;32m      1[0m Jee_list [38;5;241m=[39m np[38;5;241m.[39marange([38;5;241m15[39m, [38;5;241m25[39m, [38;5;241m.5[39m)
: [0;32m----> 2[0m rates [38;5;241m=[39m [43mget_rates_Jee[49m(Jee_list)
: [1;32m      3[0m [38;5;28mprint[39m(rates[38;5;241m.[39mshape)
: [1;32m      4[0m m0, m1, phase [38;5;241m=[39m decode_bump(rates, axis[38;5;241m=[39m[38;5;241m1[39m)
: 
: [0;31mNameError[0m: name 'get_rates_Jee' is not defined
:END:

*** Varying Ie
**** run
#+begin_src ipython

  def run_loop_Ie(Ie_list):
      
      for Ie in Ie_list:
          session = "Ie_%.2f" % Ie
          data_path = '/home/leon/models/lif_cpp/data/simul/' + session
          update_conf('../conf/config_EI', 'DATA_PATH', data_path)
          update_conf('../conf/config_EI', 'Iext', float(Ie/1000.0), axis=0)

          sleep(.2)
          run_cpp(session)
          sleep(.2)

      sleep(1)
      restore_conf('../conf/config_EI.yml')

#+end_src

#+RESULTS:

#+begin_src ipython
  
  Ie_list = np.arange(2, 6, .1)
  run_loop_Ie(Ie_list)

#+end_src

#+RESULTS:
: File moved successfully!
**** results
#+begin_src ipython
  def get_rates_Ie(Ie_list):
     rates = []
     for Ie in Ie_list:
        session = "/Ie_%.2f/" % Ie
        rate = get_data(session)
        rates.append(rate[:30000])

     rates = np.array(rates)
     return rates
#+end_src

#+RESULTS:

#+begin_src ipython
  Ie_list = np.arange(2, 6, .1)
  rates = get_rates_Ie(Ie_list)
  print(rates.shape)
  m0, m1, phase = decode_bump(rates, axis=1)

  amp = m1 / m0
  # print(Ie_list[20])
  # print(Ie_list[23])
  # plt.plot(amp[20], label='Off');
  # plt.plot(amp[23], label='On');
  # plt.legend(fontsize=10)
  plt.plot(Ie_list, amp[:,-1])
  plt.xlabel('FF input')

#+end_src

#+RESULTS:
:RESULTS:
: (40, 30000, 23)
: /tmp/ipykernel_2494347/1091463431.py:6: RuntimeWarning: invalid value encountered in divide
:   amp = m1 / m0
: Text(0.5, 0, 'FF input')
[[file:./.ob-jupyter/e21c234f2001be5fcee939b19ee701a8f511f539.png]]
:END:

*** Varying Ie & Jee
**** run
#+begin_src ipython
  Jee_list = np.arange(10, 21, 1)
  Ie_list = np.arange(1, 11, 1)
#+end_src

#+RESULTS:

#+begin_src ipython

  for Jee in Jee_list:
      for Ie in Ie_list:

          session = "Ie_%.1f_Jee_%.1f" % (Ie, Jee) 
          data_path = '/home/leon/models/lif_cpp/data/simul/' + session
          update_conf('../conf/config_EI', 'DATA_PATH', data_path)
          update_conf('../conf/config_EI', 'Iext', float(Ie/1000.0), axis=0)
          update_conf('../conf/config_EI', 'Jab', float(Jee), axis=0)

          sleep(.2)
          run_cpp(session)
          sleep(.2)

  sleep(1)
  restore_conf('../conf/config_EI.yml')

#+end_src

#+RESULTS:
: File moved successfully!

**** results
#+begin_src ipython
  # %matplotlib qt

  # Jee_list = np.arange(15, 25, 1)
  # Ie_list = np.arange(0, 5, .5)

  rates = []
  for Ie in Ie_list:
      ini = []
      for Jee in Jee_list:

          session = "/Ie_%.1f_Jee_%.1f/" % (Ie, Jee)
          try:
              r = get_data(session)
              m0, m1, phi = decode_bump(r[:30000], axis=0)
              # print(session)
              # plt.plot(m1)
              # input()
              ini.append(m1)
          except:
              pass
      rates.append(np.array(ini))

#+end_src

#+RESULTS:

#+begin_src ipython
  print(Ie_list)
  print(Jee_list)
  rates = np.array(rates)
  print(rates.shape)
  plt.imshow(np.mean(rates[:,:, -10:], -1).T, aspect='auto', vmin=0, vmax=5, cmap='jet', origin='lower')
  plt.xlabel('$I_{0}$')
  plt.ylabel('$J_{EE}$')
#+end_src

#+RESULTS:
:RESULTS:
: [ 1  2  3  4  5  6  7  8  9 10]
: [10 11 12 13 14 15 16 17 18 19 20]
: (10, 0)
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mIndexError[0m                                Traceback (most recent call last)
: Cell [0;32mIn[16], line 5[0m
: [1;32m      3[0m rates [38;5;241m=[39m np[38;5;241m.[39marray(rates)
: [1;32m      4[0m [38;5;28mprint[39m(rates[38;5;241m.[39mshape)
: [0;32m----> 5[0m plt[38;5;241m.[39mimshow(np[38;5;241m.[39mmean([43mrates[49m[43m[[49m[43m:[49m[43m,[49m[43m:[49m[43m,[49m[43m [49m[38;5;241;43m-[39;49m[38;5;241;43m10[39;49m[43m:[49m[43m][49m, [38;5;241m-[39m[38;5;241m1[39m)[38;5;241m.[39mT, aspect[38;5;241m=[39m[38;5;124m'[39m[38;5;124mauto[39m[38;5;124m'[39m, vmin[38;5;241m=[39m[38;5;241m0[39m, vmax[38;5;241m=[39m[38;5;241m5[39m, cmap[38;5;241m=[39m[38;5;124m'[39m[38;5;124mjet[39m[38;5;124m'[39m, origin[38;5;241m=[39m[38;5;124m'[39m[38;5;124mlower[39m[38;5;124m'[39m)
: [1;32m      6[0m plt[38;5;241m.[39mxlabel([38;5;124m'[39m[38;5;124m$I_[39m[38;5;132;01m{0}[39;00m[38;5;124m$[39m[38;5;124m'[39m)
: [1;32m      7[0m plt[38;5;241m.[39mylabel([38;5;124m'[39m[38;5;124m$J_[39m[38;5;132;01m{EE}[39;00m[38;5;124m$[39m[38;5;124m'[39m)
: 
: [0;31mIndexError[0m: too many indices for array: array is 2-dimensional, but 3 were indexed
:END:

#+begin_src ipython
  plt.plot(rates[-2, 4])
  plt.show()
  print(Ie_list[-2], Jee_list[4])
  print(Ie_list[4], Jee_list[-2])
  
#+end_src
#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/e328553a8f6548fc32bd4a3a3e1a0e282ca6ec62.png]]
: 4.0 19
: 2.0 23
:END:

** Diffusion analysis
*** NB off/on
**** utils

#+begin_src ipython
  def run_single(folder, phi_list, init_list, I0=0.004):

      data_path = '/home/leon/models/lif_cpp/data/simul/' + session
      update_conf('../conf/config_EI', 'DATA_PATH', data_path)
      update_conf('../conf/config_EI', 'Iext', float(I0), axis=0)
      update_conf('../conf/config_EI', 'DURATION', float(10000))

      sleep(.2)
      run_cpp(session)
      sleep(.2)

      sleep(1)
      restore_conf('../conf/config_EI.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_phi_ini(folder, phi_list, init_list, I0=0.004):

      for init in init_list:
          for phi in phi_list:

              session = "%s_phi_%d_init_%d" % (folder, phi, init)

              data_path = '/home/leon/models/lif_cpp/data/simul/' + session
              update_conf('../conf/config_EI', 'DATA_PATH', data_path)
              update_conf('../conf/config_EI', 'PHI_STIM', float(phi), axis=0)
              update_conf('../conf/config_EI', 'Iext', float(I0), axis=0)
              update_conf('../conf/config_EI', 'DURATION', float(11000))

              sleep(.2)
              run_cpp(session)
              sleep(.2)
              
      sleep(1)
      restore_conf('../conf/config_EI.yml')

#+end_src

#+RESULTS:

#+begin_src ipython  
  def get_rates(dir, phi_list, init_list):
     rates = []
     for phi in phi_list:

         phase_ini = []
         m1_ini = []
         m0_ini = []
         rate_ini = []

         for init in init_list:
             session = "/%s_phi_%d_init_%d/" % (dir, phi, init)

             # try:
             rate = get_data(session)
             rate_ini.append(rate[:30000])
             # except:
             #     pass
         rates.append(np.array(rate_ini))

     rates = np.array(rates)

     return rates
#+end_src

#+RESULTS:

**** run
#+begin_src ipython
  phi_list = np.linspace(0, 315, 8)
  init_list = np.arange(1, 21, 1)
#+end_src

#+RESULTS:

#+begin_src ipython
  # run_phi_ini('nb_off', phi_list, init_list, I0=0.004)
  run_phi_ini('nb_on', phi_list, init_list, I0=0.004)
#+end_src

#+RESULTS:
: File moved successfully!
: File moved successfully!

**** analysis
#+begin_src ipython
  phi_list = np.linspace(0, 315, 8)
  init_list = np.arange(1, 11, 1)
#+end_src

#+RESULTS:

#+begin_src ipython
  rates_off = get_rates('nb_off', phi_list, init_list)
  m0_off, m1_off, phases_off = decode_bump(rates_off, axis=2)
  print('phases off', phases_off.shape)

  rates_on = get_rates('nb_on', phi_list, init_list)
  m0_on, m1_on, phases_on = decode_bump(rates_on, axis=2)
  print('phases on', phases_on.shape)

#+end_src

#+RESULTS:
: phases off (8, 40, 23)
: phases on (8, 40, 23)

****** m1
#+begin_src ipython
  times = np.linspace(0, 10, m1_off.shape[-1])
  plt.plot(times, np.mean(np.mean(m1_off, 1),0))
  plt.plot(times, np.mean(np.mean(m1_on, 1),0))

#+end_src

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fea32fe0d90> |
[[file:./.ob-jupyter/5b91173bfe8b19963a04288ec49fe6019491843b.png]]
:END:

#+begin_src ipython

  smooth_off = circcvl(rates_off[..., -1], windowSize=3000, axis=2)
  smooth_on = circcvl(rates_on[..., -1], windowSize=3000, axis=2)

  theta = np.linspace(0, 360, rates_off.shape[2])

  plt.plot(theta, np.mean(smooth_off[4], axis=0))
  plt.plot(theta, np.mean(smooth_on[4], axis=0))
  
  plt.xlabel('Prefered Location (Â°)')
  plt.ylabel('Rate (Hz)')
  plt.yticks([0, 5])
  plt.xticks([0, 90, 180, 270, 360]);

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/96b034b88f81215e06b6c8f55db6af6dd9d1e9f8.png]]

****** phase vs time
#+begin_src ipython
  phases = np.vstack(phases_on).T
  print(phases.shape)
  
  times = get_times()

  plt.plot(phases * 180 / np.pi, alpha=0.25)
  plt.xlabel('Time (s)')
  plt.ylabel('$\phi$')
  plt.yticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (23, 320)
[[file:./.ob-jupyter/7500f73ff881375f47ef8fe83cdc34c9caf8ab9d.png]]
:END:

****** phase hist

#+begin_src ipython
  from scipy.stats import circmean

  cmean = circmean(phases_off, axis=1) # over initial conditions
  dtheta_off = np.vstack(phases_off - cmean[:,np.newaxis,:]).T * 180 / np.pi

  cmean = circmean(phases_on, axis=1)
  dtheta_on = np.vstack(phases_on - cmean[:,np.newaxis,:]).T * 180 / np.pi

  plt.hist(dtheta_off[-1], bins='auto', histtype='step', label='Off', density=True)
  plt.hist(dtheta_on[-1], bins='auto', histtype='step', label='On', density=True)
  plt.legend(fontsize=10)
  plt.xlim([-10, 10])
  plt.xlabel('$\delta \phi$')
  plt.ylabel('Density')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/df0389bc41b132ea493a86724ccec80cf3df522e.png]]

#+begin_src ipython

#+end_src

#+RESULTS:
