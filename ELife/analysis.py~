import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.io import loadmat

from decoder import get_pipeline

sns.set_context("poster", font_scale=1.0)  ## poster format
sns.set_style("ticks")


def load_file():
    file = "data/Classifiy_data_odrdistvar_allNeurons_reverse.matlab"
    data = loadmat(file)
    data.keys()

    return data


def array_to_df(array_2d, columns=["trial", "neuron"]):
    # Reshape the array
    reshaped_array = array_2d.reshape(-1, 1)

    # Create the DataFrame
    dft = pd.DataFrame(reshaped_array, columns=[columns[1]])
    dft[columns[0]] = np.repeat(np.arange(1, array_2d.shape[0] + 1), array_2d.shape[1])

    dft = dft.reindex(columns=columns)

    return dft


def get_df(data):
    rates = np.vstack((data["cdrate"], data["cdrate_stim"]))
    S1 = np.vstack((data["g1"], data["g1_stim"]))
    S2 = np.vstack((data["g2"], data["g2_stim"]))
    task = np.vstack((data["g3"], data["g3_stim"])) - 1

    df0 = array_to_df(rates, ["trial", "rate"])
    df1 = array_to_df(S1, ["trial", "S1"])
    df2 = array_to_df(S2, ["trial", "S2"])
    df3 = array_to_df(task, ["trial", "task"])

    df = pd.DataFrame()
    df["trial"] = df0["trial"]
    df["rate"] = df0["rate"]
    df["S1"] = df1["S1"]
    df["S2"] = df2["S2"]
    df["task"] = df3["task"]

    df.loc[df.trial <= 200, "NB"] = 0
    df.loc[df.trial > 200, "NB"] = 1

    print(df)

    return df


def get_X_y(df):

    # Group the dataframe by 'trial' and aggregate the 'rate' column as a list
    aggregated_df = df.groupby("trial")["rate"].agg(list).reset_index()
    # Convert the list of rates for each trial into a 2D array with 65 rows
    X = np.array(aggregated_df["rate"].tolist(), dtype=object)
    X = np.array(
        [sublist + [np.nan] * (233 - len(sublist)) for sublist in X], dtype=np.float64
    )

    X = (X - np.nanmean(X, axis=0)) ** 2

    aggregated_df = df.groupby("trial")["S1"].agg(list).reset_index()
    # Convert the list of rates for each trial into a 2D array with 65 rows
    y = np.array(aggregated_df["S1"].tolist(), dtype=object)
    y = np.array(
        [sublist + [np.nan] * (233 - len(sublist)) for sublist in y], dtype=np.float64
    )

    return X, y


def fit_single(pipe, X, y):

    y = y[:, 0]
    print("X", X.shape, "y", y.shape)

    scores = []
    for i in range(X.shape[1]):
        X_neuron = X[:, i]
        y_neuron = y[~np.isnan(X_neuron)]
        X_neuron = X_neuron[~np.isnan(X_neuron)]

        X_neuron = X_neuron.reshape(-1, 1)

        try:
            pipe.fit(X_neuron, y_neuron)
            scores.append(pipe.score(X_neuron, y_neuron))
        except:
            pass

    print("score", np.nanmean(scores))

    return scores


if __name__ == "__main__":

    data = load_file()
    df = get_df(data)

    df = df[~np.isnan(df.S1)]
    print(df.shape)

    pipe = get_pipeline(n_splits=5, penalty="l2", scoring="accuracy")

    df_off = df[(df.NB == 0)]
    X_off, y_off = get_X_y(df_off)
    scores_off = fit_single(pipe, X_off, y_off)

    print(X_off.shape)
    df_on = df[(df.NB == 1)]
    X_on, y_on = get_X_y(df_on)
    scores_on = fit_single(pipe, X_on, y_on)

    print("scores", np.nanmean(scores_off), np.nanmean(scores_on))
